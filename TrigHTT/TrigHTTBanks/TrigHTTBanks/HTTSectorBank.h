#ifndef HTTSECTORBANK_H
#define HTTSECTORBANK_H

/**
 * @file HTTSectorBank.h
 * @author Riley Xu - rixu@cern.ch
 * @date April 2nd, 2020
 * @brief This file declares a class that stores the module IDs of the sectors.
 *
 * This class reads sector definitions from a text file generated by ConstGen (or MatrixGen?).
 * The file format uses space-delimited values:
 *      * 1st line is a header with the number of sectors followed by the number of logical layers (P)
 *      * Each sector then has a line with the info:
 *                  sector# [moduleID0 ... moduleID(P-1)] IDK? coverage
 */


#include "AthenaBaseComps/AthMessaging.h"
#include "TrigHTTUtils/HTTTypes.h"

#include <iostream>
#include <map>
#include <fstream>
#include <vector>

class HTTHit;


class HTTSectorBank : public AthMessaging
{
    public:

        HTTSectorBank(MsgStream & msg, std::string const & filepath);

        size_t getNLayers() const { return m_nLayers; }
        size_t getNSectors() const { return m_s2mMap.size(); }

        std::vector<module_t> const & getModules(sector_t sector) const { return m_s2mMap[sector]; }
        std::vector<sector_t> getSectors(unsigned layer, module_t module) const; // TODO rename find?

        // Returns the sector matching 'modules' exactly (WC must be matched with WC), or -1 if none.
        sector_t findSector(std::vector<module_t> const & modules) const;

        // Returns the sector matching 'hits' exactly (WC must be matched with WC), or -1 if none.
        // If multiple hits have different hashIDs, will prefer most popular, then random.
        sector_t findSector(std::vector<std::vector<const HTTHit*>> const & hits) const;

    private:

        size_t m_nLayers;
        std::vector<std::vector<module_t>> m_s2mMap; // sector to module map. index by (sector, layer)
        std::vector<std::multimap<module_t, sector_t>> m_m2sMap; // module to sector map. index by (layer, module).

        // Helpers
        void readHeader(std::ifstream & fin);
        void readSectors(std::ifstream & fin);
        void makeInverseMap();
};



#endif // HTTSECTORBANK_H
